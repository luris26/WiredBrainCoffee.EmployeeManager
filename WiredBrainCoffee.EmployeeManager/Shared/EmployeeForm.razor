
<h3>EmployeeForm</h3>
@if (Employee is not null)
{
    <EditForm Model="@Employee" OnValidSubmit="@HandleValidSubmit"
          OnInvalidSubmit="@HandleInvalidSubmit">

        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="firstname">First Name</label>
            <InputText id="firstname" class="form-control" @bind-Value="Employee.FirstName" />
            <ValidationMessage For="() => Employee.FirstName" />
        </div>
        <div class="form-group">
            <label for="lastname">Last Name</label>
            <InputText id="lastname" class="form-control" @bind-Value="Employee.LastName" />
            <ValidationMessage For="() => Employee.LastName" />
        </div>
        <div class="form-check">
            <InputCheckbox id="isDeveloper" class="form-check-input" @bind-Value="Employee.IsDeveloper" />
            <label for="isDeveloper" class="form-check-label">Is Developer</label>
        </div>
        <div class="form-group">
            <label for="department">Department</label>
            <InputSelect id="department" class="form-select" @bind-Value="Employee.DepartmentId">
                @if (Departments != null)
                {
                    @foreach (var department in Departments)
                    {
                        <option value="@department.Id">
                            @department.Name
                        </option>
                    }
                }
            </InputSelect>
        </div>
        @if(IsEdit)
        {
            <button type="submit" class="btn btn-primary" disabled="@IsBusy">Update</button>
            <button type="button" class="btn btn-secondary" @onclick="HandleCancel"disabled="@IsBusy">Cancel</button>
        }
        else
        {
            <button type="submit" class="btn btn-primary" disabled="@IsBusy">Update</button>

        }
    </EditForm>
}
@code {
    [Parameter]
    public Employee? Employee { get; set; }

    [Parameter]

    public Department[]? Departments { get; set; }
    [Parameter]

    public bool IsBusy { get; set; }
    [Parameter]

    public bool IsEdit { get; set; }
    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }
    [Parameter]
    public EventCallback<bool> OnCancel { get; set; }
    private async Task HandleValidSubmit()
    {
        if(OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(true);
        }
    }
    private async Task HandleInvalidSubmit()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(false);
        }
    }
    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }

}
